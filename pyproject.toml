[tool.poetry]
name = "showtimes"
version = "0.1.0"
description = "A full-featured project management for foreign-media translation group"
authors = ["noaione <noaione0809@gmail.com>"]
license = "AGPL-3.0"

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "0.100.0"
redis = {extras = ["hiredis"], version = "4.6.0"}
strawberry-graphql = {extras = ["fastapi"], version = "0.195.2"}
motor = "3.2.0"
beanie = "1.20.0"
itsdangerous = "2.1.2"
orjson = "3.9.2"
websockets = "11.0.3"
coloredlogs = "15.0.1"
pendulum = "2.1.2"
aiopath = "0.6.11"
argon2-cffi = "21.3.0"
psutil = "5.9.5"
aiohttp = "3.8.5"
python-dotenv = "1.0.0"
python-magic-bin = {version = "0.4.14", platform = "win32"}
python-magic = {version = "0.4.27", platform = "linux"}
aiobotocore = "2.5.2"
meilisearch-python-async = "1.4.8"
msgspec = "0.17.0"
pydantic = "1.10.11"  # pin to v1 since beanie doesn't support v2 yet

[tool.poetry.group.dev.dependencies]
isort = "^5.12.0"
black = "^23.7.0"
uvicorn = "^0.23.1"
types-aiobotocore = {extras = ["essential"], version = "^2.5.2"}
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
typing-extensions = "^4.7.1"
ruff = "^0.0.278"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
ignore = [
    "E203",
    "F405",
    "F403",
    "F722",
    "N806",
    "COM812",
    "D400",  # first line should be period, most of my docstring will be LICENSE header so no thanks
    "D202",
    "D401",
    "N818",  # error
]
line-length = 120
extend-exclude = [
    "env",
    "venv",
    ".pytest_cache",
    ".venv",
    "__pycache__",
    ".git",
    ".mypy_cache",
    ".vscode",
    ".ruff_cache",
    "**/Lib/**",
    "dist",
    "build"
]
ignore-init-module-imports = true
target-version = "py310"
select = [
    "E",
    "F",
    "W",
    "I",
    "N",
    "S",
    "B",
    "T",
    "Q",
    # "D",
    "RUF",
    "COM",
    "CPY",
    "PTH",
    "ASYNC",
]
src = ["showtimes", "tests", "pipelines"]

[tool.ruff.pydocstyle]
convention = "numpy"
ignore-decorators = ["typing.overload"]

[tool.ruff.isort]
combine-as-imports = false
split-on-trailing-comma = true
required-imports = ["from __future__ import annotations"]
known-first-party = ["tests", "showtimes"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403", "I002", "D205"]
"tests/*.py" = ["S101", "I002", "D"]  # assert statement used in pytest
"pipelines/*" = ["T", "I", "S603", "D"]
"_metadata.py" = ["I002"]
"migrations/*" = ["T201"]

[tool.black]
line-length = 120
target-version = ["py310"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | env
  | _build
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
extend_skip = ["env/**", "venv/**", ".pytest_cache/**", ".venv/**", "__pycache__/**"]
line_length = 110
skip_gitignore = false
combine_as_imports = false

[tool.pyright]
include = ["showtimes", "pipelines", "app.py"]
exclude = ["venv", "env", "node_modules", ".venv", ".env", ".nox", ".pytest_cache", ".mypy_cache", ".tox", "build", "dist", "_build", "**/__pycache__"]
ignore = ["_testing"]
stubPath = "./stubs"

reportMissingImports = true
venv = "."

pythonVersion = "3.10"

[tool.coverage.run]
source = ["showtimes"]
branch = true
omit = [
    "tests/*",
    "showtimes/_metadata.py",
    "showtimes/**/__init__.py",
]

[tool.coverage.report]
show_missing = true
skip_empty = true
precision = 2
fail_under = 30

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
addopts = "-v --cov=showtimes --cov-config=pyproject.toml --cov-report=lcov --cov-report=term-missing"